{
	"info": {
		"_postman_id": "205590ea-9573-4490-ac90-9d5c360fa320",
		"name": "Classroom",
		"description": "This API facilitates the management of a classroom platform with two user types: **Teachers** and **Students**.\n\n### **Features**:\n\n- **Teacher Features**:\n    \n    - Create, update, and delete courses.\n        \n    - Manage course details.\n        \n- **Student Features**:\n    \n    - Browse all available courses.\n        \n    - Purchase courses and view enrolled courses.\n        \n- **Shared Features**:\n    \n    - Dashboard access with personalized data for both Teachers and Students after login.\n        \n    - Authentication and user management.\n        \n\nThis collection includes endpoints for managing users, courses, authentication, and dashboards.",
		"schema": "https://schema.postman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "SignUp",
					"item": [
						{
							"name": "Signup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "486f7015-a302-4b0d-977b-74385325a68a",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"postman.setNextRequest(null);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f53a4f33-82dd-43f9-b0e8-d5756ccf7266",
										"exec": [
											"function GenearteRandomUsername() {",
											"    // Generate a random 6-character prefix with letters",
											"    const prefix = Array.from({ length: 6 }, () =>",
											"        String.fromCharCode(97 + Math.floor(Math.random() * 26))",
											"    ).join('');",
											"",
											"    return prefix;",
											"}",
											"const randomUsername = GenearteRandomUsername()",
											"",
											"pm.environment.set(\"username\", randomUsername)",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "050b249a-328c-4d43-9e0d-3c9cda636649",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{username}}@example.com\",\n  \"password\": \"{{password}}\",\n  \"role\": \"student\",\n  \"name\": \"old user\"\n}\n\n// {\n// \"username\": \"ghhsefefgfde\",\n// \"email\": \"infvgalid@email.com\",\n// \"password\": \"Synergy@1234\",\n// \"role\": \"teacher\",\n// \"name\": \"Fahad\"\n// }\n// {\n// \"username\": \"user'; DROP TABLE users; --\",\n//   \"email\": \"hacker@example.com\",\n//   \"password\": \"SecurePass!234\",\n//     \"role\": \"teacher\",\n// \"name\": \"InvalidName\"\n// }\n// {\n// \"username\": \"\",\n// \"email\": \"\",\n// \"password\": \"\",\n// \"role\": \"\",\n// \"name\": \"\"\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/signup",
								"description": "- To Successfull Signup user will need to give correct creadintials username, email, password, Role(teacher/student) it will be small letters, and full name.\n    \n- Users (Students or Teachers) can register with valid credentials.\n    \n- Upon successful registration, they are redirected to the login page."
							},
							"response": []
						},
						{
							"name": "Signup Automation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "486f7015-a302-4b0d-977b-74385325a68a",
										"exec": [
											"let jsonData = pm.response.json();",
											"",
											"let testType = pm.environment.get(\"testType\");",
											"let testIndex = pm.environment.get(\"signupTestIndex\");",
											"",
											"// ------------test case automation for Positive testing-------",
											"if (testType === \"runPositiveTest\") {",
											"",
											"    pm.test(\"🔄 Running Positive test case: \" + \"iteration : \" + testIndex);",
											"",
											"    pm.test(\"Status code is 201\", function () {",
											"        pm.response.to.have.status(201);",
											"    });",
											"    pm.test(\"Success must be true\", function () {",
											"        pm.expect(jsonData.success).to.eql(true);",
											"    });",
											"    pm.test(\"Message must be same with response message\", function () {",
											"        pm.expect(jsonData.message).to.be.oneOf([",
											"            \"Student registered successfully\",",
											"            \"Teacher registered successfully\"",
											"        ]);",
											"    });",
											"}",
											"",
											"// ------------test case automation for Negative testing-------",
											"// -------------for existing username ---------",
											"if (testType === \"existingUsernameTest\") {",
											"",
											"    pm.test(\"🔄 Running Negative test case invalid user and password: \" + \"iteration : \" + testIndex);",
											"",
											"    pm.test(\"Status code is 400\", function () {",
											"        pm.response.to.have.status(400);",
											"    });",
											"    pm.test(\"Success must not be true\", function () {",
											"        pm.expect(jsonData.success).to.eql(false);",
											"    });",
											"    pm.test(\"message will be Invalid username selected\", function () {",
											"        pm.expect(jsonData.message).to.eql(\"Username is already taken.\");",
											"    });",
											"}",
											"",
											"// ---------- for existing email signup ---------",
											"if (testType === \"existingEmailTest\") {",
											"",
											"    pm.test(\"🔄 Running Try signup with Existing email: \" + \"iteration : \" + testIndex);",
											"",
											"    pm.test(\"Status code is 400\", function () {",
											"        pm.response.to.have.status(400);",
											"    });",
											"    pm.test(\"Success must not be true\", function () {",
											"        pm.expect(jsonData.success).to.eql(false);",
											"    });",
											"    pm.test(\"message will be email already taken\", function () {",
											"        pm.expect(jsonData.message).to.eql(\"Email is already taken.\");",
											"    });",
											"}",
											"",
											"// ---------- try to check username case sensitive ---------",
											"",
											"if (testType === \"caseSensitiveUser\") {",
											"",
											"    pm.test(\"🔄 Running check username case sensitive: \" + \"iteration : \" + testIndex);",
											"",
											"    pm.test(\"Status code is 201\", function () {",
											"        pm.response.to.have.status(201);",
											"    });",
											"    pm.test(\"Success must be true\", function () {",
											"        pm.expect(jsonData.success).to.eql(true);",
											"    });",
											"    pm.test(\"Message must be same with response message\", function () {",
											"        pm.expect(jsonData.message).to.be.oneOf([",
											"            \"Student registered successfully\",",
											"            \"Teacher registered successfully\"",
											"        ]);",
											"    });",
											"}",
											"",
											"// -------------Try signUp with extra field ---------",
											"if (testType === \"extraFieldTest\") {",
											"",
											"    pm.test(\"🔄 Running edge test extra field: \" + \"iteration : \" + testIndex);",
											"",
											"    pm.test(\"Status code is 400 or 403\", function () {",
											"        pm.response.to.have.status(400 || 403);",
											"    });",
											"    pm.test(\"Success must not be true\", function () {",
											"        pm.expect(jsonData.success).to.eql(false);",
											"    });",
											"    pm.test(\"message will be Extra field not supported\", function () {",
											"        pm.expect(jsonData.message).to.eql(\"Extra field not supported\");",
											"    });",
											"}",
											"",
											"// ---------- Try signup with empty data/fields ---------",
											"if (testType === \"emptyFieldTest\") {",
											"",
											"    pm.test(\"🔄 Running Negative test case empty fields: \" + \"iteration : \" + testIndex);",
											"",
											"    pm.test(\"Status code is 400\", function () {",
											"        pm.response.to.have.status(400);",
											"    });",
											"    pm.test(\"Success must not be true\", function () {",
											"        pm.expect(jsonData.success).to.eql(false);",
											"    });",
											"    pm.test(\"message will be Validation failed\", function () {",
											"        pm.expect(jsonData.message).to.eql(\"Validation failed.\");",
											"    });",
											"",
											"    pm.test(\"response data should be eqal as test cases\", function () { ",
											"        const expectedErrors = [",
											"            \"Username is mandatory\",",
											"            \"Username must be between 3 and 20 characters\"",
											"        ]",
											"        const actualErrors = jsonData.data.username;",
											"        pm.expect(actualErrors.slice().sort()).to.eql(expectedErrors.slice().sort());",
											"        pm.expect(jsonData.data.password).to.eql([\"Password cannot be empty\"]);",
											"        pm.expect(jsonData.data.role).to.eql([\"Role is mandatory\"]);",
											"        pm.expect(jsonData.data.email).to.eql(['Email is mandatory']);",
											"    });",
											"}",
											"",
											"// -------------for SQL inject in All fields ---------",
											"if (testType === \"sqlInjectAllfield\") {",
											"    pm.test(\"🔄 Running Security test case SQL inject All fields: \" + \"iteration : \" + testIndex);",
											"    pm.test(\"Status code is 400 or 403\", function () {",
											"        pm.response.to.have.status(400 || 403);",
											"    });",
											"}",
											"",
											"// ----------------- Try signup with invalid email------------",
											"if (testType === \"invalidEmailTest\") {",
											"    pm.test(\"🔄 Running signup with Invalid email: \" + \"iteration : \" + testIndex)",
											"    pm.test(\"Status code is 400\", function () {",
											"        pm.response.to.have.status(400);",
											"    });",
											"    pm.test(\"Error message: Email should be valid\", function () {",
											"        pm.expect(jsonData.data.email).to.eql([\"Email should be valid\"]);",
											"    });",
											"}",
											"",
											"// ------------Try signup with weak password --------",
											"if (testType === \"weakPasswordTest\") {",
											"    pm.test(\"🔄 Running signup with Invalid email: \" + \"iteration : \" + testIndex)",
											"    pm.test(\"Status code is 400\", function () {",
											"        pm.response.to.have.status(400);",
											"    });",
											"    // console.log(jsonData.data.password)",
											"    pm.test(\"Error message: Validation failed.\", function () {",
											"        pm.expect(jsonData.message).to.eql(\"Validation failed.\");",
											"    });",
											"    pm.test(\"response data should be eqal as test cases\", function () {",
											"        pm.expect(jsonData.data.password.slice().sort()).to.includes(\"Password must contain at least one uppercase letter\", \"Password must contain at least one special character\", \"Password must be at least 8 characters long\", \"Password must contain at least one digit\");",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f53a4f33-82dd-43f9-b0e8-d5756ccf7266",
										"exec": [
											"let signupTests = [",
											"    // ---------for positive testing------------",
											"    {",
											"        username: \"dfdfgs\",",
											"        email: \"cgghh@fssfs.com\",",
											"        password: \"Synergy@1234\",",
											"        role: \"student\",",
											"        name: \"Fahim\",",
											"        testType: \"runPositiveTest\"",
											"    },",
											"    // ---------- for existing username ---------",
											"    {",
											"        username: \"fghfghfg\",",
											"        email: \"unkrrowegn@fsfs.com\",",
											"        password: \"Synergy@1234\",",
											"        role: \"student\",",
											"        name: \"Fahim\",",
											"        testType: \"existingUsernameTest\"",
											"    },",
											"",
											"    // ---------- for existing email signup ---------",
											"    {",
											"        username: \"hhddff\",",
											"        email: \"unkrrowegn@fsfs.com\",",
											"        password: \"Synergy@1234\",",
											"        role: \"student\",",
											"        name: \"Fahim\",",
											"        testType: \"existingEmailTest\"",
											"    },",
											"    // ---------- try to check username case sensitive ---------",
											"    {",
											"        username: \"HHDFF\", // take a existing username and set it in uppercase",
											"        email: \"fghfgh@fsfs.com\",",
											"        password: \"Synergy@1234\",",
											"        role: \"student\",",
											"        name: \"Fahim\",",
											"        testType: \"caseSensitiveUser\"",
											"    },",
											"    // ---------- Trying signup with extra field ---------",
											"    {",
											"        username: \"gyjuj\",",
											"        email: \"xdagfw@fsfs.com\",",
											"        password: \"Synergy@1234\",",
											"        role: \"student\",",
											"        name: \"Fahim\",",
											"        extraField: \"extrafielddata\",",
											"        testType: \"extraFieldTest\"",
											"    },",
											"    ",
											"    // ---------- Try signup with empty data/fields ---------",
											"   {",
											"        username: \"\",",
											"        email: \"\",",
											"        password: \"\",",
											"        role: \"\",",
											"        name: \"\",",
											"        testType: \"emptyFieldTest\"",
											"    },",
											"    // ---------- for SQL inject in username and password ---------",
											"    {",
											"        username: \"' OR '1'='1\",",
											"        email: \"' OR '1'='1\",",
											"        password: \"' OR '1'='1\",",
											"        role: \"' OR '1'='1\",",
											"        name: \"' OR '1'='1\",",
											"        testType: \"sqlInjectAllfield\"",
											"    },",
											"    // ---------- Try sign up with invalid email ---------",
											"    {",
											"        username: \"gfgdgdgfgdf\",",
											"        email: \"i\",",
											"        password: \"Synergy@1234\",",
											"        role: \"student\",",
											"        name: \"Fahim\",",
											"        testType: \"invalidEmailTest\"",
											"    },",
											"        // ---------- Try sign up with invalid or weak password ---------",
											"    {",
											"        username: \"nbghndcx\",",
											"        email: \"ghhgjgh@fgfd.com\",",
											"        password: \"hg\",",
											"        role: \"student\",",
											"        name: \"Fahim\",",
											"        testType: \"weakPasswordTest\"",
											"    },",
											"]",
											"",
											"let currentIndex = pm.environment.get(\"signupTestIndex\") || 0;",
											"currentIndex = parseInt(currentIndex);",
											"",
											"let currentTest = signupTests[currentIndex]",
											"pm.environment.set(\"username\", currentTest.username);",
											"pm.environment.set(\"email\", currentTest.email);",
											"pm.environment.set(\"password\", currentTest.password);",
											"pm.environment.set(\"role\", currentTest.role);",
											"pm.environment.set(\"name\", currentTest.name);",
											"pm.environment.set(\"testType\", currentTest.testType);",
											"",
											"if (currentTest.extraField){",
											"    pm.environment.set(\"extraField\", currentTest.extraField)",
											"}",
											"",
											"// Increment index for next request ",
											"if (currentIndex < signupTests.length - 1) {",
											"    pm.environment.set(\"signupTestIndex\", currentIndex + 1);",
											"} else {",
											"    pm.environment.set(\"signupTestIndex\", 0);",
											"}",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"pm.execution.setNextRequest(null)",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "92d1b67f-438d-4e8d-99b5-6ad13a4021ae",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"role\": \"{{role}}\",\n  \"name\": \"{{name}}\"\n}\n\n// {\n// \"username\": \"\",\n// \"email\": \"\",\n// \"password\": \"\",\n// \"role\": \"\",\n// \"name\": \"\"\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/signup",
								"description": "- To Successfull Signup user will need to give correct creadintials username, email, password, Role(teacher/student) it will be small letters, and full name.\n    \n- Users (Students or Teachers) can register with valid credentials.\n    \n- Upon successful registration, they are redirected to the login page."
							},
							"response": []
						}
					],
					"id": "2156d6b2-3bd6-4bef-b376-fb22c9c22d28"
				},
				{
					"name": "LogIn",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6058a1be-c6fc-48e6-adb9-0c5c37f63124",
										"exec": [
											"res = pm.response.json()",
											"if (res) {",
											"    pm.environment.set(\"accessToken\", res.data.accessToken);",
											"    pm.environment.set(\"refreshToken\", res.data.refreshToken);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5b81b9b4-10f8-48c9-9692-b58817e825cc",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "3b10254a-b225-47eb-b1b3-d88d9c841a31",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}\n\n// {\n//   \"username\": \"fahim07\",\n//   \"password\": \"Synergy@1234\"\n// }\n\n// {\n// \"username\": \"FAHIM07\",\n// \"password\": \"Synergy@1234\"\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://192.168.0.204:8080/login",
								"description": "- To Successfull authentication user will need to give correct username and password.\n    \n- Authenticated users receive a **Bearer Token** and a **Refresh Token** in the response.\n    \n- Tokens enable secure access to protected endpoints and maintain long-term login sessions.\n    \n- In script tab there are written script to store tokens in environment variabls"
							},
							"response": []
						},
						{
							"name": "Login Automation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6058a1be-c6fc-48e6-adb9-0c5c37f63124",
										"exec": [
											"jsonData = pm.response.json()",
											"// if (res ==true) {",
											"//     pm.environment.set(\"accessToken\", res.data.accessToken)",
											"//     pm.environment.set(\"refreshToken\", res.data.refreshToken)",
											"// }",
											"",
											"let testType = pm.environment.get(\"testType\");",
											"let testIndex = pm.environment.get(\"loginTestIndex\");",
											"",
											"// ------------test case automation for Positive testing-------",
											"if (testType === \"runPositiveTest\") {",
											"",
											"    pm.test(\"🔄 Running Positive test case: \" + \"iteration : \" + testIndex);",
											"    ",
											"    pm.test(\"Status code is 200\", function() {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    pm.test(\"Body have strings success, messages, data\", function() {",
											"        pm.expect(pm.response.text()).to.include(\"success\", \"message\", \"data\");",
											"    });",
											"",
											"    pm.test(\"Success must be ture\", function() {",
											"        pm.expect(jsonData.success).to.eql(true);",
											"    });",
											"",
											"    pm.test(\"Body must have accessToken and refreshToken in data object\", function() {",
											"        pm.expect(jsonData.data).to.have.property(\"accessToken\");",
											"        pm.expect(jsonData.data.accessToken).to.be.a(\"string\");",
											"",
											"        pm.expect(jsonData.data).to.have.property(\"refreshToken\");",
											"        pm.expect(jsonData.data.refreshToken).to.be.a(\"string\");",
											"    });",
											"",
											"}",
											"",
											"// ------------test case automation for Negative testing-------",
											"// -------------for invalid user and password ---------",
											"if (testType === \"invalidUserPass\") {",
											"",
											"    pm.test(\"🔄 Running Negative test case invalid user and password: \"+ \"iteration : \" +  testIndex);",
											"",
											"    pm.test(\"Status code is 400\", function() {",
											"        pm.response.to.have.status(400);",
											"    });",
											"    pm.test(\"Success must not be ture\", function() {",
											"        pm.expect(jsonData.success).to.eql(false);",
											"    });",
											"    pm.test(\"message will be Invalid username selected\", function() {",
											"        pm.expect(jsonData.message).to.eql(\"Invalid username selected\");",
											"    });",
											"}",
											"",
											"",
											"// -------------for empty user and password ---------",
											"if (testType === \"emptyUserPass\") {",
											"",
											"    pm.test(\"🔄 Running Negative test case empty user and password: \"+ \"iteration : \" + testIndex);",
											"",
											"    pm.test(\"Status code is 400\", function() {",
											"        pm.response.to.have.status(400);",
											"    });",
											"    pm.test(\"Success must not be ture\", function() {",
											"        pm.expect(jsonData.success).to.eql(false);",
											"    });",
											"    pm.test(\"message will be Validation failed\", function() {",
											"        pm.expect(jsonData.message).to.eql(\"Validation failed.\");",
											"    });",
											"    pm.test(\"response data should be eqal as test cases\", function() {",
											"        pm.expect(jsonData.data.username).to.eql([\"Username is mandatory\"]);",
											"        pm.expect(jsonData.data.password).to.eql([\"Password is mandatory\"]);",
											"    });",
											"}",
											"// -------------for extra field with user and password ---------",
											"if (testType === \"extraField\") {",
											"",
											"    pm.test(\"🔄 Running edge test case extra field with user and password: \"+ \"iteration : \" + testIndex);",
											"",
											"    pm.test(\"Status code is 400 or 403\", function() {",
											"        pm.response.to.have.status(400 || 403);",
											"    });",
											"    pm.test(\"Success must not be ture\", function() {",
											"        pm.expect(jsonData.success).to.eql(false);",
											"    });",
											"    pm.test(\"message will be invalid request\", function() {",
											"        pm.expect(jsonData.message).to.eql(\"Invalid username selected\");",
											"    });",
											"}",
											"",
											"// -------------for SQL inject in extra field with user and password ---------",
											"if (testType === \"extraFieldSqlInject\") {",
											"",
											"    pm.test(\"🔄 Running Security test case SQL inject in extra field: \"+ \"iteration : \" +  testIndex);",
											"",
											"    pm.test(\"Status code is 400 or 403\", function() {",
											"        pm.response.to.have.status(400 || 403);",
											"    });",
											"}",
											"",
											"// -------------for SQL inject username and password ---------",
											"if (testType === \"sqlInjectUserPass\") {",
											"",
											"    pm.test(\"🔄 Running Security test case SQL inject username and password: \"+ \"iteration : \" +  testIndex);",
											"",
											"    pm.test(\"Status code is 400 or 403\", function() {",
											"        pm.response.to.have.status(400 || 403);",
											"    });",
											"}",
											"",
											"// -------------for nested JSON in extra field with user and password ---------",
											"if (testType === \"extraFieldJsonObject\") {",
											"",
											"    pm.test(\"🔄 Running Edge test case nested JSON in extra field with user and password: \"+ \"iteration : \" + testIndex);",
											"",
											"    pm.test(\"Status code is 400\", function() {",
											"        pm.response.to.have.status(400);",
											"    });",
											"}",
											"// -------------for case0sensitive username ---------",
											"if (testType === \"caseSensitiveUsername\") {",
											"",
											"    pm.test(\"🔄 Running Edge test case case0sensitive username: \"+ \"iteration : \" + testIndex);",
											"",
											"    pm.test(\"Status code is 400 or 401\", function() {",
											"        pm.response.to.have.status(400 || 401);",
											"    });",
											"}",
											"",
											"",
											"let requestUrl = pm.request.url.toString();",
											"let statusCode = pm.response.code;",
											"",
											"if (requestUrl.startsWith(\"http://\")) {",
											"    pm.test(\"❌ This API running in http method that not secure\", function() {",
											"        pm.expect(statusCode).to.be.oneOf([400, 403, 405]);",
											"    });",
											"} else if (requestUrl.startsWith(\"https://\")) {",
											"    pm.test(\"https request should be succeed\", function() {",
											"        pm.expect(statusCode).to.eql(200)",
											"    })",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5b81b9b4-10f8-48c9-9692-b58817e825cc",
										"exec": [
											"let loginTests = [",
											"    // ---------for positive testing------------",
											"    {",
											"        username: \"fahim07\",",
											"        password: \"Synergy@1234\",",
											"        testType: \"runPositiveTest\"",
											"    },",
											"    // ---------- for invalid user and password ---------",
											"    {",
											"        username: \"wronguser\",",
											"        password: \"wrongpassword\",",
											"        testType: \"invalidUserPass\"",
											"    },",
											"    // ---------- for empty user and password ---------",
											"    {",
											"        username: \"\",",
											"        password: \"\",",
											"        testType: \"emptyUserPass\"",
											"    },",
											"    // ---------- for extra field with user and password ---------",
											"    {",
											"        username: \"fahim07\",",
											"        password: \"Synergy@1234\",",
											"        extraField: \"unexpected\",",
											"        testType: \"extraField\"",
											"    },",
											"    // ---------- for SQL inject in extra field user and password ---------",
											"    {",
											"        username: \"fahim07\",",
											"        password: \"Synergy@1234\",",
											"        extraField: \"' OR '1'='1\",",
											"        testType: \"extraFieldSqlInject\"",
											"    },",
											"    // ---------- for JSON object in extra field user and password ---------",
											"    {",
											"        username: \"fahim07\",",
											"        password: \"Synergy@1234\",",
											"        extraField: {",
											"            \"nested\": \"value\"",
											"        },",
											"        testType: \"extraFieldJsonObject\"",
											"    },",
											"    // ---------- for SQL inject in username and password ---------",
											"    {",
											"        username: \"' OR '1'='1\",",
											"        password: \"' OR '1'='1\",",
											"        testType: \"sqlInjectUserPass\"",
											"    },",
											"    // ---------- for case-sensitive in username field ---------",
											"    {",
											"        username: \"faHIm07\",",
											"        password: \"Synergy@1234\",",
											"        testType: \"caseSensitiveUsername\"",
											"    },",
											"]",
											"",
											"// Get the current test index (default 0 if not set)",
											"let currentIndex = pm.environment.get(\"loginTestIndex\") || 0;",
											"currentIndex = parseInt(currentIndex);",
											"",
											"",
											"// Set username, password, and other data from the array",
											"let currentTest = loginTests[currentIndex];",
											"pm.environment.set(\"username\", currentTest.username);",
											"pm.environment.set(\"password\", currentTest.password);",
											"pm.environment.set(\"testType\", currentTest.testType);",
											"",
											"if (currentTest.extraField) {",
											"    pm.environment.set(\"extraField\", currentTest.extraField);",
											"}",
											"// Increment index for next request ",
											"if (currentIndex < loginTests.length - 1) {",
											"    pm.environment.set(\"loginTestIndex\", currentIndex + 1);",
											"} else {",
											"    pm.environment.set(\"loginTestIndex\", 0);",
											"}",
											"",
											"// postman.setNextRequest(null);",
											"",
											"",
											"",
											"",
											"",
											"",
											"// ---------for positive testing------------",
											"// pm.variables.set(\"username\", \"fahim06\")",
											"// pm.variables.set(\"password\", \"Synergy@1234\")",
											"// pm.environment.set(\"testType\", \"runPositiveTest\");",
											"",
											"// ------------for negative testing-------------",
											"// ---------- for invalid user and password ---------",
											"// pm.variables.set(\"username\", \"wronguser\")",
											"// pm.variables.set(\"password\", \"wrongpassword\")",
											"// pm.environment.set(\"testType\", \"invalidUserPass\");",
											"",
											"// ---------- for empty user and password ---------",
											"// pm.variables.set(\"username\", \"\")",
											"// pm.variables.set(\"password\", \"\")",
											"// pm.environment.set(\"testType\", \"emptyUserPass\");",
											"",
											"// ---------- for extra field with user and password ---------",
											"// pm.variables.set(\"username\", \"fahim07\")",
											"// pm.variables.set(\"password\", \"Synergy@1234\")",
											"// pm.variables.set(\"extraField\", \"unexpected\")",
											"// pm.environment.set(\"testType\", \"extraField\");",
											"",
											"// ---------- for SQL inject in extra field user and password ---------",
											"// pm.variables.set(\"username\", \"fahim07\")",
											"// pm.variables.set(\"password\", \"Synergy@1234\")",
											"// pm.variables.set(\"extraField\", \"' OR '1'='1\")",
											"// pm.environment.set(\"testType\", \"extraFieldSqlInject\");",
											"",
											"// ---------- for SQL inject in username and password ---------",
											"// pm.variables.set(\"username\", \"' OR '1'='1\")",
											"// pm.variables.set(\"password\", \"' OR '1'='1\")",
											"// pm.environment.set(\"testType\", \"sqlInjectUserPass\");",
											"",
											"// ---------- for JSON object in extra field user and password ---------",
											"// pm.variables.set(\"username\", \"fahim07\")",
											"// pm.variables.set(\"password\", \"Synergy@1234\")",
											"// pm.variables.set(\"extraField\", { \"nested\": \"value\" })",
											"// pm.environment.set(\"testType\", \"extraFieldJsonObject\");",
											"",
											"// ---------- for case-sensitive in username field ---------",
											"// pm.variables.set(\"username\", \"faHIm07\")",
											"// pm.variables.set(\"password\", \"Synergy@1234\");",
											"// pm.environment.set(\"testType\", \"caseSensitiveUsername\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a3a9fbcc-d352-4494-8d79-16accbac2f3a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}\n\n// {\n//   \"username\": \"fahim07\",\n//   \"password\": \"Synergy@1234\"\n// }\n\n// {\n// \"username\": \"FAHIM07\",\n// \"password\": \"Synergy@1234\"\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://192.168.0.204:8080/login",
								"description": "- To Successfull authentication user will need to give correct username and password.\n    \n- Authenticated users receive a **Bearer Token** and a **Refresh Token** in the response.\n    \n- Tokens enable secure access to protected endpoints and maintain long-term login sessions.\n    \n- In script tab there are written script to store tokens in environment variabls"
							},
							"response": []
						}
					],
					"id": "99fecb76-3fe5-4a20-8128-2ce01ce070e4"
				},
				{
					"name": "Refresh",
					"item": [
						{
							"name": "Refresh",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7508fc5c-333a-4f11-9b93-eb6b5bc36a85",
										"exec": [
											"res = pm.response.json()",
											"if (res.success == true){",
											"    pm.environment.set(\"accessToken\", res.data.accessToken)",
											"}",
											"",
											"",
											"// লুপ কন্ট্রোল করার জন্য counter বাড়ানো",
											"let count = pm.environment.get(\"loopCounter\") || 0;",
											"count++;",
											"",
											"// যদি count < 10 হয়, তাহলে আবার Refresh Token API চালাও",
											"if (count < 10) {",
											"    pm.environment.set(\"loopCounter\", count);",
											"    pm.setNextRequest(\"Refresh Token API\"); // নিজের API নাম বসাও",
											"} else {",
											"    pm.setNextRequest(null); // 10 বার হলে Stop",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ad48cfac-d892-4318-b9b1-4b5606dfac7b",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "994d192c-a009-4397-95a4-e710b3bbf6c0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Refresh-Token",
										"value": "{{refreshToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/refresh",
								"description": "The **Refresh Token** can be used to generate a new **Bearer Token** when the access token expires."
							},
							"response": []
						},
						{
							"name": "Refresh Automation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7508fc5c-333a-4f11-9b93-eb6b5bc36a85",
										"exec": [
											"jsonData = pm.response.json()",
											"if (jsonData.success === true) {",
											"    pm.environment.set(\"accessToken\", jsonData.data.accessToken)",
											"}",
											"",
											"testType = pm.environment.get(\"testType\")",
											"refreshTestIndex = pm.environment.get(\"refreshTestIndex\")",
											"",
											"// Test case of valid refresh token is passed",
											"if (testType === \"validToken\") {",
											"    pm.test(\"🔄 Running with valid token: \" + \"iteration : \" + refreshTestIndex);",
											"    pm.test(\"Status code is 200\", function() {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    pm.test(\"Success must be ture\", function() {",
											"        pm.expect(jsonData.success).to.eql(true);",
											"    });",
											"    pm.test(\"accessToken have to be in data object\", function() {",
											"        pm.expect(jsonData).to.be.an('object');",
											"        pm.expect(jsonData.data.accessToken).to.exist;",
											"    });",
											"    pm.test(\"accessToken should be string\", function() {",
											"        pm.expect(jsonData.data.accessToken).to.be.a(\"string\");",
											"    })",
											"}",
											"",
											"// Test case of invalid refresh token is passed",
											"if (testType === \"invalidToken\") {",
											"    pm.test(\"🔄 Running with invalid token: \" + \"iteration : \" + refreshTestIndex);",
											"    pm.test(\"Status code is 400\", function() {",
											"        pm.response.to.have.status(400);",
											"    });",
											"    pm.test(\"response messege should be invalid token\", function() {",
											"        pm.expect(jsonData).to.be.an('object');",
											"        pm.expect(jsonData.message).to.exist.and.to.eql('invalid token');",
											"    });",
											"}",
											"",
											"// Test case of missing refreshToken",
											"if (testType === \"emptyToken\") {",
											"    pm.test(\"🔄 Running with missing/empty token: \" + \"iteration : \" + refreshTestIndex);",
											"    pm.test(\"Status code is 400\", function() {",
											"        pm.response.to.have.status(400);",
											"    });",
											"    pm.test(\"message should be custom message like: token cannot be null or empty\", function() {",
											"        pm.expect(jsonData.message).to.equal(\"token cannot be null or empty\");",
											"    });",
											"}",
											"",
											"// Test case of sql inject in refreshToken",
											"if (testType === \"sqlInject\") {",
											"    pm.test(\"🔄 Running with sql code in token: \" + \"iteration : \" + refreshTestIndex);",
											"    pm.test(\"Status code is 400\", function() {",
											"        pm.response.to.have.status(400);",
											"    });",
											"    pm.test(\"message should be custom message like: token cannot be null or empty\", function() {",
											"        pm.expect(jsonData.message).to.equal(\"token cannot be null or empty\");",
											"    });",
											"}",
											"",
											"",
											"// Check every request returns unique accessToken",
											"if(testType === \"uniqueAccessToken\"){",
											"    pm.test(\"🔄 Running AccessToken is unique: \" + \"iteration : \" + refreshTestIndex);",
											"    pm.test(\"Status code is 200\", function() {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    pm.test(\"Every request have return unique accessToken\", function(){",
											"        envAccToken = pm.environment.get(\"accessToken\")",
											"        pm.expect(jsonData.data.accessToken).to.not.eql(envAccToken)",
											"    })",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ad48cfac-d892-4318-b9b1-4b5606dfac7b",
										"exec": [
											"refreshTests = [",
											"// using valid token",
											"{",
											"    token : pm.environment.get(\"refreshToken\"),",
											"    testType : \"validToken\"",
											"},",
											"// using invalid token",
											"{",
											"    token : \"eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJmYWhpbTA2IiwiaWF0IjoxNzM4NzMzNjk4LCJleHAiOjE3Mzg4MjAwOTh9.aUTRaBt30gDhWCS5BjbrrnHjc8H83fahim06zftggrtb564pDGRVZU\",",
											"    testType : \"invalidToken\"",
											"},",
											"// missing refreshToken",
											"{",
											"    token : \"\",",
											"    testType : \"emptyToken\"",
											"},",
											"// sql inject refreshToken",
											"{",
											"    token : \"' OR '1'='1\",",
											"    testType : \"sqlInject\"",
											"},",
											"{",
											"    token : pm.environment.get(\"refreshToken\"),",
											"    testType : \"uniqueAccessToken\"",
											"},",
											"]",
											"",
											"// Get the current test index (default 0 if not set)",
											"let currentIndex = pm.environment.get(\"refreshTestIndex\") || 0;",
											"currentIndex = parseInt(currentIndex);",
											"",
											"",
											"// Set data from the array",
											"let currentTest = refreshTests[currentIndex];",
											"pm.environment.set(\"newRefToken\", currentTest.token);",
											"pm.environment.set(\"testType\", currentTest.testType);",
											"",
											"if (currentTest.extraField) {",
											"    pm.environment.set(\"newRefToken\", currentTest.extraField);",
											"}",
											"// Increment index for next request ",
											"if (currentIndex < refreshTests.length - 1) {",
											"    pm.environment.set(\"refreshTestIndex\", currentIndex + 1);",
											"} else {",
											"    pm.environment.set(\"refreshTestIndex\", 0);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "464341c7-535c-47f0-a76a-d50656c6f919",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Refresh-Token",
										"value": "{{newRefToken}}",
										"type": "text"
									},
									{
										"key": "Refresh-Token",
										"value": "{{refreshToken}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/refresh",
								"description": "The **Refresh Token** can be used to generate a new **Bearer Token** when the access token expires."
							},
							"response": []
						}
					],
					"id": "863b599a-b08d-408b-b9ec-c95f8279d10d"
				},
				{
					"name": "Logout",
					"item": [
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a37a4b57-8bb4-49fd-a0e2-9f03fe0c7dea",
										"exec": [
											"res = pm.response.json()",
											"if( res.success == true) {",
											"    pm.environment.set(\"accessToken\", \"\")",
											"    pm.environment.set(\"refreshToken\", \"\")",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "baf50c60-2d1a-462a-93b1-4146ab0144e7",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d6ff180d-11f1-435e-923f-1f14452495dd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/logout",
								"description": "- The `/logout` endpoint accepts the **Bearer Token** in the header.\n    \n- Upon successful logout, all tokens are invalidated, ensuring the user is securely logged out."
							},
							"response": []
						},
						{
							"name": "Logout Automation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a37a4b57-8bb4-49fd-a0e2-9f03fe0c7dea",
										"exec": [
											"jsonData = pm.response.json()",
											"if( jsonData.success == true) {",
											"    pm.environment.set(\"accessToken\", \"\")",
											"    // pm.environment.set(\"refreshToken\", \"\")",
											"}",
											"testType = pm.environment.get(\"testType\")",
											"accessTokenIndex = pm.environment.get(\"accessTokenIndex\")",
											"",
											"// Test case of valid refresh token is passed",
											"if (testType === \"validToken\") {",
											"    pm.test(\"🔄 Running with valid token: \" + \"iteration : \" + accessTokenIndex);",
											"    pm.test(\"Status code is 200\", function() {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    pm.test(\"Success must be ture\", function() {",
											"        pm.expect(jsonData.success).to.eql(true);",
											"    });",
											"",
											"}",
											"// Test case of valid refresh token is passed",
											"if (testType === \"invalidToken\") {",
											"    pm.test(\"🔄 Running with invalid token: \" + \"iteration : \" + accessTokenIndex);",
											"    pm.test(\"Status code is 401\", function() {",
											"        pm.response.to.have.status(401);",
											"    });",
											"    pm.test(\"message should be Authentication failed.\", function() {",
											"        pm.expect(jsonData.message).to.eql(\"Authentication failed.\");",
											"    });",
											"",
											"}",
											"",
											"// missing accessToken",
											"if (testType === \"emptyToken\") {",
											"    pm.test(\"🔄 Running with MIssing/empty token: \" + \"iteration : \" + accessTokenIndex);",
											"    pm.test(\"Status code is 401\", function() {",
											"        pm.response.to.have.status(401);",
											"    });",
											"    pm.test(\"message should be Authentication failed.\", function() {",
											"        pm.expect(jsonData.message).to.eql(\"Unauthorized: Full authentication is required to access this resource\");",
											"    });",
											"        pm.test(\"Success must be ture\", function() {",
											"        pm.expect(jsonData.success).to.eql(false);",
											"    });",
											"",
											"}",
											"// Expire accessToken",
											"if (testType === \"expireToken\") {",
											"    pm.test(\"🔄 Running with MIssing/empty token: \" + \"iteration : \" + accessTokenIndex);",
											"    pm.test(\"Status code is 401\", function() {",
											"        pm.response.to.have.status(401);",
											"    });",
											"    pm.test(\"message should be Authentication failed.\", function() {",
											"        pm.expect(jsonData.message).to.eql(\"Authentication failed.\");",
											"    });",
											"",
											"}",
											"",
											"// Try call protected api routs after logout.",
											"if (testType === \"protectAfterLogout\") {",
											"    pm.test(\"🔄 Running let's see user can visit protected page after logout: \" + \"iteration : \" + accessTokenIndex);",
											"    pm.test(\"Status code is 200\", function() {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    // send a request in protected route",
											"    if (jsonData.success === true) {",
											"        // Define the request options",
											"        const requestOptions = {",
											"            url: 'http://192.168.0.204:8080/course/details',",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"                'Authorization': pm.environment.get(\"accessToken\")",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({\"courseId\": 4})",
											"            }",
											"        };",
											"",
											"        // Send the request",
											"        pm.sendRequest(requestOptions, function(err, res) {",
											"            if (err) {",
											"                console.error('Request failed:', err);",
											"            } else {",
											"                // console.log('Response status:', res.status);",
											"                console.log('Response body:', res.json());",
											"                pm.test(\"course/details not reachable after logout\", function(){",
											"                    pm.expect(res.json().success).to.eql(false)",
											"                })",
											"            }",
											"        });",
											"",
											"    }",
											"}",
											"",
											"// sql inject in accessToken",
											"if (testType === \"sqlInject\") {",
											"    pm.test(\"🔄 Running with sql inject in token: \" + \"iteration : \" + accessTokenIndex);",
											"    pm.test(\"Status code is 401\", function() {",
											"        pm.response.to.have.status(401);",
											"    });",
											"    pm.test(\"message should be Authentication failed.\", function() {",
											"        pm.expect(jsonData.message).to.eql(\"Authentication failed.\");",
											"    });",
											"",
											"}",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "baf50c60-2d1a-462a-93b1-4146ab0144e7",
										"exec": [
											"accessTokenTests = [",
											"// using valid accessToken",
											"{",
											"    token : pm.environment.get(\"accessToken\"),",
											"    testType : \"validToken\"",
											"},",
											"// using invalid accessToken",
											"{",
											"    token : pm.environment.get(\"accessToken\")+\"iuyg\",",
											"    testType : \"invalidToken\"",
											"},",
											"// missing accessToken",
											"{",
											"    token : \"\",",
											"    testType : \"emptyToken\"",
											"},",
											"//try with expire token",
											"{",
											"    token : \"eyJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJST0xFX1RFQUNIRVIiXSwidXNlcklkIjo1Niwic3ViIjoiZGJnYW91IiwiaWF0IjoxNzM4NzM3Mjg4LCJleHAiOjE3Mzg4MjM2ODh9.kvX091cjcZ-b9DWAMgCywObmnjxx97sukPLBApLFUT\",",
											"    testType : \"expireToken\"",
											"},",
											"// Try call protected api routs after logout.",
											"{",
											"    token : pm.environment.get(\"accessToken\"),",
											"    testType : \"protectAfterLogout\"",
											"},",
											"",
											"// sql inject accessToken",
											"{",
											"    token : \"' OR '1'='1\",",
											"    testType : \"sqlInject\"",
											"},",
											"]",
											"",
											"// Get the current test index (default 0 if not set)",
											"let currentIndex = pm.environment.get(\"accessTokenIndex\") || 0;",
											"currentIndex = parseInt(currentIndex);",
											"",
											"",
											"// Set data from the array",
											"let currentTest = accessTokenTests[currentIndex];",
											"pm.environment.set(\"newAccessToken\", currentTest.token);",
											"pm.environment.set(\"testType\", currentTest.testType);",
											"",
											"if (currentTest.extraField) {",
											"    pm.environment.set(\"newAccessToken\", currentTest.extraField);",
											"}",
											"// Increment index for next request ",
											"if (currentIndex < accessTokenTests.length - 1) {",
											"    pm.environment.set(\"accessTokenIndex\", currentIndex + 1);",
											"} else {",
											"    pm.environment.set(\"accessTokenIndex\", 0);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "157a04ae-e9de-43f8-ab89-2c73475ad816",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{newAccessToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/logout",
								"description": "- The `/logout` endpoint accepts the **Bearer Token** in the header.\n    \n- Upon successful logout, all tokens are invalidated, ensuring the user is securely logged out."
							},
							"response": []
						}
					],
					"id": "09a08e31-0071-4ea2-b700-c1bfe7c59f81"
				}
			],
			"id": "cc585f7a-1bbe-4ec3-b008-de16e83acc52",
			"description": "This section contains API endpoints for user authentication in the Classroom Application.",
			"auth": {
				"type": "bearer",
				"bearer": {
					"token": "{{accessToken}}"
				}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c4deff02-fa94-4a6e-8a77-3a43f653d55c",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "342feff8-0630-490a-8823-4f24e89d4e26",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Course Management",
			"item": [
				{
					"name": "Create Course",
					"item": [
						{
							"name": "Create Course",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0333f627-3534-46aa-81c7-a9ab052903c8",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"res = pm.response.json()",
											"// console.log(res)",
											"pm.test(\"passed\", function () {",
											"    pm.expect(res.message).to.be.eql(\"Course created successfully\")",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d4e9feb5-97e1-4979-bc67-41e40c27c7d1",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "70923611-da9c-49f8-8452-52c1951e834c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Romantic Novel\",\n  \"books\": [\n    {\n      \"name\": \"Pride and Prejudicek\",\n      \"author\": \"Jane Austen, 1813\"\n    }\n  ]\n}\n\n// {\n//   \"title\": \"Romantic Novel'; DROP TABLE books; --\",\n//   \"books\": [\n//     {\n//       \"name\": \"The Notebook'; DROP TABLE books; --\",\n//       \"author\": \"Emily Henry\"\n//     }\n//   ]\n// }\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/course/create",
								"description": "- In /course/create user must be logged in and also be a teacher.\n    \n- For executing this request you need to give accessToken authorization tab after choosing auth type bearer token.\n    \n- Also you will pass data (like example json) in body tab.\n    \n- Then hit the send button you will get success message."
							},
							"response": []
						},
						{
							"name": "Create Course - Automation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0333f627-3534-46aa-81c7-a9ab052903c8",
										"exec": [
											"jsonData = pm.response.json()",
											"",
											"",
											"let testType = pm.environment.get(\"testType\");",
											"let testIndex = pm.environment.get(\"createCourseTestIndex\");",
											"",
											"if (testType == \"courseWithValidDtls\"){",
											"    pm.test(\"🔄 Creating course with valid details is running: \" + \"iteration : \" + testIndex);",
											"    ",
											"    pm.test(\"Status code is 201\", function() {",
											"        pm.response.to.have.status(201);",
											"    });",
											"    pm.test(\"Body have strings success, messages\", function() {",
											"        pm.expect(pm.response.text()).to.include(\"success\", \"message\");",
											"    });",
											"",
											"    pm.test(\"Success must be ture\", function() {",
											"        pm.expect(jsonData.success).to.eql(true);",
											"    });",
											"        pm.test(\"Messages should be \", function() {",
											"        pm.expect(jsonData.message).to.eql(\"Course created successfully\");",
											"    });",
											"}",
											"if (testType == \"VerifyDBEntry\"){",
											"    pm.test(\"🔄 Verify created data available in database is running: \" + \"iteration : \" + testIndex);",
											"    ",
											"    // -------------------",
											"    //to find db entry of exact book we need created book id ",
											"",
											"}",
											"",
											"// Negative testing",
											"",
											"if (testType == \"missingFieldTest\"){",
											"    pm.test(\"🔄 Verify missing field dont entry in DB is running: \" + \"iteration : \" + testIndex);",
											"    ",
											"    pm.test(\"Status code is 400\", function() {",
											"        pm.response.to.have.status(400);",
											"    });",
											"        pm.test(\"Success must be false\", function() {",
											"        pm.expect(jsonData.success).to.eql(false);",
											"    });",
											"        pm.test(\"Messages should be \", function() {",
											"        pm.expect(jsonData.message).to.eql(\"Validation failed.\");",
											"    });",
											"",
											"}",
											"if (testType == \"invalidDataType\"){",
											"        pm.test(\"🔄 Verify invalid data type dont entry in DB - is running: \" + \"iteration : \" + testIndex);",
											"    ",
											"    pm.test(\"Course should not be created 400\", function() {",
											"        pm.response.to.have.status(400);",
											"    });",
											"        pm.test(\"Success must be false\", function() {",
											"        pm.expect(jsonData.success).to.eql(false);",
											"    });",
											"        pm.test(\"Messages should be \", function() {",
											"        pm.expect(jsonData.message).to.eql(\"Validation failed.\");",
											"    });",
											"}",
											"",
											"// EDGE Testing",
											"",
											"if (testType == \"extremlyLongName\"){",
											"    pm.test(\"🔄 Verify Extremly long name dont entry in DB - is running: \" + \"iteration : \" + testIndex);",
											"    ",
											"    pm.test(\"Course should not be created 401\", function() {",
											"        pm.response.to.have.status(401);",
											"    });",
											"    pm.test(\"Body have timestamp, status, error, trace \", function() {",
											"        pm.expect(pm.response.text()).to.include(\"timestamp\", \"status\", \"error\", \"trace\");",
											"    });",
											"    pm.test(\"trace have include Data too long for column\", function(){",
											"        pm.expect(jsonData.trace).to.include(\"Data too long for column\")",
											"    })",
											"}",
											"",
											"if(testType == \"unexpectedFields\"){",
											"    pm.test(\"🔄 Verify unexpected fields dont entry in DB - is running: \" + \"iteration : \" + testIndex);",
											"    pm.test(\"Course should not be created 401\", function() {",
											"        pm.response.to.have.status(401);",
											"    });",
											"    pm.test(\"Body have timestamp, status, error, trace \", function() {",
											"        pm.expect(pm.response.text()).to.include(\"timestamp\", \"status\", \"error\", \"trace\");",
											"    });",
											"    pm.test(\"trace have include extra fields not accepted\", function(){",
											"        pm.expect(jsonData.trace).to.include(\"extra fields not accepted\")",
											"    })",
											"",
											"}",
											"",
											"if(testType == \"specialChrInField\"){",
											"    pm.test(\"🔄 Verify special charecter any fields dont entry in DB - is running: \" + \"iteration : \" + testIndex);",
											"    pm.test(\"Course should not be created 401\", function() {",
											"        pm.response.to.have.status(401 || 400);",
											"    });",
											"    pm.test(\"Body have timestamp, status, error, trace \", function() {",
											"        pm.expect(pm.response.text()).to.include(\"timestamp\", \"status\", \"error\", \"trace\");",
											"    });",
											"    pm.test(\"trace have include extra fields not accepted\", function(){",
											"        pm.expect(jsonData.trace).to.include(\"Special charecter is not allowed\")",
											"    })",
											"",
											"}",
											"if(testType == \"largePayladReq\"){",
											"    pm.test(\"🔄 Verify large payload in not allow - is running: \" + \"iteration : \" + testIndex);",
											"    pm.test(\"Course should not be created 401\", function() {",
											"        pm.response.to.have.status(401 || 400);",
											"    });",
											"    pm.test(\"Body have timestamp, status, error, trace \", function() {",
											"        pm.expect(pm.response.text()).to.include(\"timestamp\", \"status\", \"error\", \"trace\");",
											"    });",
											"    pm.test(\"trace have include extra fields not accepted\", function(){",
											"        pm.expect(jsonData.trace).to.include(\"Special charecter is not allowed\")",
											"    })",
											"",
											"}",
											"if(testType == \"withoutAuth\"){",
											"    pm.test(\"🔄 without accessToken request test - is running: \" + \"iteration : \" + testIndex);",
											"",
											"    pm.test(\"Unauthorized 401\", function() {",
											"        pm.response.to.have.status(401);",
											"    });",
											"    pm.test(\"success should be false\", function () {",
											"        pm.expect(pm.response.json().success).to.be.false;",
											"    });",
											"    pm.test(\"message should be Unauthorized: Full authentication is required to access this resource\", function () {",
											"        pm.expect(pm.response.json().message).to.equal(\"Unauthorized: Full authentication is required to access this resource\");",
											"    });",
											"}",
											"if(testType == \"invalidAuthToken\"){",
											"    pm.test(\"🔄 Invalid accessToken request test - is running: \" + \"iteration : \" + testIndex);",
											"",
											"    pm.test(\"Course should not be created 401\", function() {",
											"        pm.response.to.have.status(401 || 400);",
											"    });",
											"    pm.test(\"Body have timestamp, status, error, message, path \", function() {",
											"        pm.expect(pm.response.text()).to.include(\"timestamp\", \"status\", \"error\", \"message\", \"path\");",
											"    });",
											"    pm.test(\"trace have include extra fields not accepted\", function(){",
											"        pm.expect(jsonData.message).to.include(\"Authentication failed.\")",
											"    })",
											"}",
											"if(testType == \"sqlInjectInAuth\"){",
											"    pm.test(\"🔄 SQL injection in input fields - is running: \" + \"iteration : \" + testIndex);",
											"",
											"    pm.test(\"Course should not be created 401\", function() {",
											"        pm.response.to.have.status(401 || 400);",
											"    });",
											"    pm.test(\"Body have timestamp, status, error, message, path \", function() {",
											"        pm.expect(pm.response.text()).to.include(\"timestamp\", \"status\", \"error\", \"message\", \"path\");",
											"    });",
											"    pm.test(\"trace have include extra fields not accepted\", function(){",
											"        pm.expect(jsonData.message).to.include(\"Authentication failed.\")",
											"    })",
											"}",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d4e9feb5-97e1-4979-bc67-41e40c27c7d1",
										"exec": [
											"let courseCretion = [",
											"",
											"    // positive test cases",
											"    {",
											"        bookTitle: \"Romantic Novel\",",
											"        bookName: \"Pride and Prejudice\",",
											"        bookAuthor: \"Jane Austen, 1813\",",
											"        testType: \"courseWithValidDtls\"",
											"    },",
											"    {",
											"        bookTitle: \"Romantic Novel\",",
											"        bookName: \"Pride and Prejudice\",",
											"        bookAuthor: \"Jane Austen, 1813\",",
											"        testType: \"VerifyDBEntry\"",
											"    },",
											"    // Negative Testing",
											"    {",
											"        bookTitle: \"\",",
											"        bookName: \"Pride and Prejudice\",",
											"        bookAuthor: \"Jane Austen, 1813\",",
											"        testType: \"missingFieldTest\"",
											"    },",
											"    {",
											"        bookTitle: true,",
											"        bookName: false,",
											"        bookAuthor: \"Jane Austen, 1813\",",
											"        testType: \"invalidDataType\"",
											"    },",
											"",
											"    // EDGE Testing",
											"    {",
											"        bookTitle: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla facilisi. Sed vel justo eu elit tincidunt sodales. Integer at purus non urna malesuada gravida. Vestibulum ut arcu nec justo auctor congue. Duis quis nisi nec elit lobortis efficitur. Nam bibendum, erat ac fermentum tincidunt, justo purus dignissim nulla, vel aliquet mi augue ut nisl. Aliquam erat volutpat. Cras facilisis purus in sapien ultricies, nec tristique ex luctus. Vivamus id justo vel massa pharetra eleifend. Suspendisse potenti. Ut faucibus, magna non egestas sagittis, ligula velit laoreet est, a fermentum arcu turpis ut puru\",",
											"        bookName: \"Pride and Prejudice\",",
											"        bookAuthor: \"Jane Austen, 1813\",",
											"        testType: \"extremlyLongName\"",
											"    },",
											"    {",
											"        bookTitle: \"hdhgd\",",
											"        bookName: \"dffd\",",
											"        bookAuthor: \"Jane Austen, 1813\",",
											"        date: \"12.3.2099\",",
											"        testType: \"unexpectedFields\"",
											"    },",
											"    {",
											"        bookTitle: \"hdhgd\",",
											"        bookName: \"!@#$%^&*\",",
											"        bookAuthor: \"Jane Austen, 1813\",",
											"        testType: \"specialChrInField\"",
											"    },",
											"    //security Testing",
											"    {",
											"        bookTitle: \"Romantic Novel\",",
											"        bookName: \"Pride and Prejudice\",",
											"        bookAuthor: \"Jane Austen, 1813\",",
											"        testType: \"withoutAuth\"",
											"    },",
											"    {",
											"        bookTitle: \"Romantic Novel\",",
											"        bookName: \"Pride and Prejudice\",",
											"        bookAuthor: \"Jane Austen, 1813\",",
											"        testType: \"invalidAuthToken\"",
											"    },",
											"    {",
											"        bookTitle: \"Romantic Novel\",",
											"        bookName: \"Pride and Prejudice\",",
											"        bookAuthor: \"Jane Austen, 1813\",",
											"        testType: \"sqlInjectInAuth\"",
											"    },",
											"",
											"",
											"",
											"]",
											"",
											"// Get current index",
											"let currentIndex = pm.environment.get(\"createCourseTestIndex\") || 0",
											"currentIndex = parseInt(currentIndex);",
											"",
											"// Set bookTitle, bookNmae, bookAuthor, TestType from courseCreation array",
											"let currentTest = courseCretion[currentIndex]",
											"pm.environment.set(\"bookTitle\", currentTest.bookTitle)",
											"pm.environment.set(\"bookName\", currentTest.bookName)",
											"pm.environment.set(\"bookAuthor\", currentTest.bookAuthor)",
											"pm.environment.set(\"testType\", currentTest.testType)",
											"",
											"// if there are extra fields in the input field (testing purpose)",
											"if(currentTest.extraField){",
											"    pm.environment.set(\"extraField\", currentTest.extraField)",
											"}",
											"",
											"if (currentIndex < courseCretion.length -1){",
											"    pm.environment.set(\"createCourseTestIndex\", currentIndex + 1)",
											"} else {",
											"    pm.environment.set(\"createCourseTestIndex\", 0);",
											"}",
											"",
											"",
											"if (currentTest.testType == \"withoutAuth\"){",
											"    pm.environment.set(\"accessToken\", \"\")",
											"}",
											"if (currentTest.testType == \"invalidAuthToken\"){",
											"    pm.environment.set(\"accessToken\", \"eyJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJST0xFX1NUVURFTlQiXSwidXNlcklkIjo2LCJzdWIiOiJmYWhpbTA2IiwiaWF0IjoxNzM5MTg2ODI2LCJleHAiOjE3MzkxODcxMjZ9.C67M1EOCs7F5sxnRPiOeDSV9ShSUdtUQtEiZst3txpEiuyg\")",
											"}",
											"if (currentTest.testType == \"sqlInjectInAuth\"){",
											"    pm.environment.set(\"accessToken\", \"' OR 1=1 --\")",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "96d9d489-1c25-4ded-be25-0aa62de9706f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"{{bookTitle}}\",\n  \"books\": [\n    {\n      \"name\": \"{{bookName}}\",\n      \"author\": \"{{bookAuthor}}\"\n    }\n  ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/course/create",
								"description": "- In /course/create user must be logged in and also be a teacher.\n    \n- For executing this request you need to give accessToken authorization tab after choosing auth type bearer token.\n    \n- Also you will pass data (like example json) in body tab.\n    \n- Then hit the send button you will get success message."
							},
							"response": []
						}
					],
					"id": "26e7f593-ca43-47c9-92b6-cf0dca12092f"
				},
				{
					"name": "Enroll Course",
					"item": [
						{
							"name": "Enroll Course",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27ece9e1-314a-4814-9092-410fea6ef549",
										"exec": [
											"res = pm.response.json()",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0eb97c44-34fc-4b56-8bfc-030acdd34423",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "780718fe-f8f3-400e-a53f-ff0bfbb1c8bb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"courseId\": 5\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/course/enroll",
								"description": "- In /course/enroll user must be logged in and also be a student.\n    \n- For executing this request you need to give accessToken authorization tab after choosing auth type bearer token.\n    \n- Also you will pass coursID (like example json) in body tab.\n    \n- Then hit the send button you will get success messages."
							},
							"response": []
						},
						{
							"name": "Enroll Course - Automation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27ece9e1-314a-4814-9092-410fea6ef549",
										"exec": [
											"jsonData = pm.response.json()",
											"",
											"",
											"let testType = pm.environment.get(\"testType\");",
											"let testIndex = pm.environment.get(\"enrollCourseTestIndex\");",
											"// Positive Testing",
											"if (testType == \"ValidCourseId\"){",
											"    pm.test(\"🔄 Enrolled course with valid courseId is running: \" + \"iteration : \" + testIndex);",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    pm.test(\"Success message should be true\", function () {",
											"        pm.expect(jsonData.success).to.be.true;",
											"    });",
											"    pm.test(\"message should be Student: username enrolled successfully in course\", function () {",
											"     pm.expect(jsonData.message).to.include('Student:').and.to.include('enrolled successfully in course:');",
											"    });",
											"}",
											"if (testType == \"ChkEnrollment\"){",
											"    pm.test(\"🔄 Enrolled course available in user profile - is running: \" + \"iteration : \" + testIndex);",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    pm.test(\"Success message should be true\", function () {",
											"        pm.expect(jsonData.success).to.be.true;",
											"    });",
											"    pm.test(\"message should be Student: username enrolled successfully in course\", function () {",
											"     pm.expect(jsonData.message).to.include('Student:').and.to.include('enrolled successfully in course:');",
											"    });",
											"",
											"",
											"    pm.sendRequest({",
											"        url: \"http://192.168.0.204:8080/profile/details\",",
											"            method: \"GET\",",
											"        header: {",
											"            \"Authorization\": \"Bearer \" + pm.environment.get(\"accessToken\"),  // Use stored token",
											"            \"Content-Type\": \"application/json\"",
											"        }",
											"    }, function (err, response) {",
											"    pm.test(\"User Profile Status code is 200\", function () {",
											"        pm.expect(response.code).to.eql(200);",
											"    });",
											"",
											"    pm.test(\"User Profile Response include enrolled course\", function () {",
											"        let jsonData = response.json();",
											"        courseID = pm.environment.get(\"courseId\")",
											"        // console.log(jsonData.data.courses.find(course => course.id === courseID))",
											"        extractedId = jsonData.data.courses.find(course => course.id === courseID)",
											"        // console.log(extractedId.id)",
											"        pm.expect(extractedId.id).to.eql(courseID);  // Adjust based on API response",
											"    });",
											"    });",
											"",
											"}",
											"",
											"if(testType == \"missingId\"){",
											"    pm.test(\"🔄 Enrolled course with missing courseId is running: \" + \"iteration : \" + testIndex);",
											"}",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0eb97c44-34fc-4b56-8bfc-030acdd34423",
										"exec": [
											"let enrollCourses = [",
											"    // Positive Testing",
											"    {",
											"        courseId : 9,",
											"        testType : \"ValidCourseId\"",
											"    },",
											"    {",
											"        courseId : 60,",
											"        testType : \"ChkEnrollment\"",
											"    },",
											"",
											"    // Negative Testing",
											"    {",
											"        courseId : \"\",",
											"        testType : \"missingId\"",
											"    }",
											"",
											"]",
											"",
											"",
											"",
											"// Get current index",
											"let currentIndex = pm.environment.get(\"enrollCourseTestIndex\") || 0",
											"currentIndex = parseInt(currentIndex);",
											"",
											"// Set bookTitle, bookNmae, bookAuthor, TestType from courseCreation array",
											"let currentTest = enrollCourses[currentIndex]",
											"pm.environment.set(\"courseId\", currentTest.courseId)",
											"pm.environment.set(\"testType\", currentTest.testType)",
											"",
											"// if there are extra fields in the input field (testing purpose)",
											"if(currentTest.extraField){",
											"    pm.environment.set(\"extraField\", currentTest.extraField)",
											"}",
											"",
											"// if (currentIndex < enrollCourses.length -1){",
											"//     pm.environment.set(\"enrollCourseTestIndex\", currentIndex + 1)",
											"// } else {",
											"//     pm.environment.set(\"enrollCourseTestIndex\", 0);",
											"// }"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e10f1ef8-7068-43c8-8678-dab7e9a21250",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"courseId\": {{courseId}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/course/enroll",
								"description": "- In /course/enroll user must be logged in and also be a student.\n    \n- For executing this request you need to give accessToken authorization tab after choosing auth type bearer token.\n    \n- Also you will pass coursID (like example json) in body tab.\n    \n- Then hit the send button you will get success messages."
							},
							"response": []
						}
					],
					"id": "42cfb5e5-a780-45f9-8e6b-5a8ad994e601"
				},
				{
					"name": "All Courses",
					"item": [
						{
							"name": "All Courses",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd0c3d10-4cf3-41b1-aa36-7e008f88e4d6",
										"exec": [
											"res = pm.response.json()",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"passes\", function (){",
											"    pm.expect(res.message).to.have.eql(\"Successfully fetched all the courses\")",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "85449180-c547-4eac-84b2-996ac581e8fb",
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"id": "52a8af2d-be69-4ce4-ab52-81c4a016d514",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseUrl}}/course/all",
								"description": "- To getting all courses user must be logged in .\n    \n- For executing this request you need to give accessToken authorization tab after choosing auth type bearer token.\n    \n- Then hit the send button you will get response success messages and data of all courses."
							},
							"response": []
						}
					],
					"id": "6690ee4a-315c-420e-b2de-96580b4ac3e2"
				},
				{
					"name": "Single Course",
					"item": [
						{
							"name": "Single Course",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ceaf34ea-2752-4df0-95e7-aa8284af11ef",
										"exec": [
											"res = pm.response.json()",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"passes\", function (){",
											"    pm.expect(res.message).to.have.eql(\"Course details are in below.\")",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b163c889-7e60-4664-b08c-fd9544e401cf",
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"id": "6dfe622c-9347-4869-a50b-692da290fcd1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseUrl}}/course/details?courseId=9",
									"host": [
										"{{BaseUrl}}"
									],
									"path": [
										"course",
										"details"
									],
									"query": [
										{
											"key": "courseId",
											"value": "9"
										}
									]
								},
								"description": "- To getting a single course user must be logged in .\n    \n- For executing this request you need to give accessToken authorization tab after choosing auth type bearer token.\n    \n- And you also give course id that you want to access\n    \n- Then hit the send button you will get response success messages and data of a course."
							},
							"response": []
						}
					],
					"id": "c78e3280-61ad-4bcf-b850-c7e62cfb3bed"
				}
			],
			"id": "e99c0c25-a19c-461b-bfce-97de868c8df5"
		},
		{
			"name": "Dashboard Management",
			"item": [
				{
					"name": "Enrolled Students",
					"id": "8eb5cc73-7a5c-4072-b809-779d0e79c9ae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/course/enrolled/all-student?courseId=4",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"course",
								"enrolled",
								"all-student"
							],
							"query": [
								{
									"key": "courseId",
									"value": "4"
								}
							]
						},
						"description": "- /course/enrolled/all-student In this endpoint you will see all the students those are enrolled in a course.\n    \n- To getting response user must be logged in .\n    \n- For executing this request you need to give accessToken authorization tab after choosing auth type bearer token.\n    \n- And you also give course id which course you want to see.\n    \n- Then hit the send button you will get response success messages and see enrolled students."
					},
					"response": []
				},
				{
					"name": "Dashboard",
					"id": "e8983dfc-6069-44ea-9fbb-98839958bdbc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}/dashboard",
						"description": "In dashboard a teacher will see all the course that he created, and see a create button to create more courses .The student will see all the courses that he enrolled, he will also see a see more button to buy more courses. They both will access the user profile in right top corner.\n\n- To getting response user must be logged in .\n    \n- For executing this request you need to give accessToken authorization tab after choosing auth type bearer token.\n    \n- Then hit the send button you will get response success messages and see dashboard."
					},
					"response": []
				},
				{
					"name": "Profile Details",
					"id": "224b88c1-a54e-4458-acde-17d983b34e39",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseUrl}}/profile/details",
						"description": "- in /profile/details user will see and edit their user profile.\n    \n- To getting response user must be logged in .\n    \n- For executing this request you need to give accessToken authorization tab after choosing auth type bearer token.\n    \n- Then hit the send button you will get response success messages and see profile details."
					},
					"response": []
				}
			],
			"id": "be092565-03bc-4815-b941-9c29c81b31a1",
			"description": "After successful login, users are redirected to their personalized dashboard based on their role (Student or Teacher)."
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{accessToken}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "dcc0d3f8-cfc7-4f6d-bee8-735b76ebe7fc",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "64424fd3-a4fa-4425-adc3-90427bd04411",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}